#!/bin/bash
# Progress indicator for configuration completeness
show_progress_bar() {
    local completed=0
    local total=5
    
    # Count completed configurations
    for key in server port environment database ssl; do
        if [ -n "${config[$key]}" ]; then
            ((completed++))
        fi
    done
    
    local percentage=$((completed * 100 / total))
    local filled=$((completed * 20 / total))
    local empty=$((20 - filled))
    
    echo -e "${WHITE}${BOLD}┌─ Configuration Progress ─────────────────────────────┐${NC}"
    echo -e "${WHITE}│${NC}"
    
    # Progress bar
    echo -ne "${WHITE}│${NC} ${CYAN}Progress:${NC} ["
    
    # Filled portion
    for i in $(seq 1 $filled); do
        echo -ne "${GREEN}█${NC}"
    done
    
    # Empty portion
    for i in $(seq 1 $empty); do
        echo -ne "${GRAY}░${NC}"
    done
    
    echo -e "] ${YELLOW}${BOLD}$percentage%${NC}"
    echo -e "${WHITE}│${NC} ${GRAY}($completed/$total items configured)${NC}"
    echo -e "${WHITE}│${NC}"
    echo -e "${WHITE}└──────────────────────────────────────────────────────┘${NC}"
    echo ""
}

# Interactive CLI Menu System
# Walks user through providing arguments via menus and questions

declare -A config
declare -a menu_stack
declare current_menu="main"

# ANSI Color codes and effects
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
NC='\033[0m' # No Color

# ANSI Effects
BOLD='\033[1m'
DIM='\033[2m'
UNDERLINE='\033[4m'
BLINK='\033[5m'
REVERSE='\033[7m'
RESET='\033[0m'

# Background colors
BG_RED='\033[41m'
BG_GREEN='\033[42m'
BG_YELLOW='\033[43m'
BG_BLUE='\033[44m'
BG_PURPLE='\033[45m'
BG_CYAN='\033[46m'

# Clear screen and show animated header
show_header() {
    clear
    echo -e "${CYAN}${BOLD}"
    echo "╔══════════════════════════════════════════════════════╗"
    echo "║  🚀 ${WHITE}Interactive System Configuration Tool${CYAN}  ║"
    echo "╠══════════════════════════════════════════════════════╣"
    echo "║  ${YELLOW}✨ Walk through setup with guided menus ✨${CYAN}   ║"
    echo "╚══════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    echo ""
}

# Show current config status with fancy boxes
show_config_status() {
    echo -e "${WHITE}${BOLD}┌─ 📊 Current Configuration ─────────────────────────┐${NC}"
    echo -e "${WHITE}│${NC}"
    
    # Server status
    if [ -n "${config[server]}" ]; then
        echo -e "${WHITE}│${NC} 🖥️  Server: ${GREEN}${BOLD}${config[server]}${NC}"
    else
        echo -e "${WHITE}│${NC} 🖥️  Server: ${RED}${DIM}❌ Not configured${NC}"
    fi
    
    # Port status
    if [ -n "${config[port]}" ]; then
        echo -e "${WHITE}│${NC} 🔌 Port: ${GREEN}${BOLD}${config[port]}${NC}"
    else
        echo -e "${WHITE}│${NC} 🔌 Port: ${RED}${DIM}❌ Not configured${NC}"
    fi
    
    # Environment status
    if [ -n "${config[environment]}" ]; then
        case "${config[environment]}" in
            "development") env_emoji="🛠️" ;;
            "staging") env_emoji="🧪" ;;
            "production") env_emoji="🚀" ;;
            *) env_emoji="⚙️" ;;
        esac
        echo -e "${WHITE}│${NC} ${env_emoji} Environment: ${GREEN}${BOLD}${config[environment]}${NC}"
    else
        echo -e "${WHITE}│${NC} ⚙️  Environment: ${RED}${DIM}❌ Not configured${NC}"
    fi
    
    # Database status
    if [ -n "${config[database]}" ]; then
        case "${config[database]}" in
            "mysql") db_emoji="🐬" ;;
            "postgresql") db_emoji="🐘" ;;
            "sqlite") db_emoji="🪶" ;;
            "mongodb") db_emoji="🍃" ;;
            *) db_emoji="🗄️" ;;
        esac
        echo -e "${WHITE}│${NC} ${db_emoji} Database: ${GREEN}${BOLD}${config[database]}${NC}"
    else
        echo -e "${WHITE}│${NC} 🗄️  Database: ${RED}${DIM}❌ Not configured${NC}"
    fi
    
    # SSL status
    if [ -n "${config[ssl]}" ]; then
        if [ "${config[ssl]}" = "enabled" ]; then
            echo -e "${WHITE}│${NC} 🔒 SSL: ${GREEN}${BOLD}✅ Enabled${NC}"
        else
            echo -e "${WHITE}│${NC} 🔓 SSL: ${YELLOW}${BOLD}⚠️  Disabled${NC}"
        fi
    else
        echo -e "${WHITE}│${NC} 🔐 SSL: ${RED}${DIM}❌ Not configured${NC}"
    fi
    
    echo -e "${WHITE}│${NC}"
    echo -e "${WHITE}└─────────────────────────────────────────────────────┘${NC}"
    echo ""
}

# Enhanced menu function with unicode and emojis
show_menu() {
    local title="$1"
    shift
    local options=("$@")
    
    echo -e "${PURPLE}${BOLD}┌─ $title ─$(printf '─%.0s' $(seq 1 $((50 - ${#title}))))┐${NC}"
    echo -e "${PURPLE}│${NC}"
    
    for i in "${!options[@]}"; do
        local option_num=$((i+1))
        local option_text="${options[$i]}"
        
        # Add appropriate emoji based on option
        case "$option_text" in
            *"Server"*|*"hostname"*) emoji="🖥️ " ;;
            *"port"*|*"Port"*) emoji="🔌 " ;;
            *"Environment"*) emoji="🌍 " ;;
            *"Database"*) emoji="🗄️ " ;;
            *"SSL"*) emoji="🔒 " ;;
            *"Test"*) emoji="🧪 " ;;
            *"Generate"*|*"Run"*) emoji="⚡ " ;;
            *"Development"*) emoji="🛠️ " ;;
            *"Staging"*) emoji="🧪 " ;;
            *"Production"*) emoji="🚀 " ;;
            *"MySQL"*) emoji="🐬 " ;;
            *"PostgreSQL"*) emoji="🐘 " ;;
            *"SQLite"*) emoji="🪶 " ;;
            *"MongoDB"*) emoji="🍃 " ;;
            *"Enable"*) emoji="✅ " ;;
            *"Disable"*) emoji="❌ " ;;
            *) emoji="▶️ " ;;
        esac
        
        echo -e "${PURPLE}│${NC} ${CYAN}${BOLD}[$option_num]${NC} $emoji${WHITE}$option_text${NC}"
    done
    
    echo -e "${PURPLE}│${NC}"
    echo -e "${PURPLE}│${NC} ${GRAY}[${YELLOW}b${GRAY}]${NC} 🔙 ${GRAY}Back${NC}"
    echo -e "${PURPLE}│${NC} ${GRAY}[${RED}q${GRAY}]${NC} 🚪 ${GRAY}Quit${NC}"
    echo -e "${PURPLE}└$(printf '─%.0s' $(seq 1 52))┘${NC}"
    echo ""
}

# Enhanced choice input with animation
get_choice() {
    local max_option=$1
    while true; do
        echo -ne "${CYAN}${BOLD}❯ ${WHITE}Select option ${GRAY}[${GREEN}1-$max_option${GRAY}, ${YELLOW}b${GRAY}, ${RED}q${GRAY}]${WHITE}: ${NC}"
        read -r choice
        
        case $choice in
            [1-9]|[1-9][0-9])
                if [ "$choice" -le "$max_option" ]; then
                    echo -e "${GREEN}✓ ${GRAY}Option $choice selected${NC}"
                    sleep 0.3
                    return $choice
                else
                    echo -e "${RED}❌ Invalid option. Please select 1-$max_option${NC}"
                fi
                ;;
            b|B)
                echo -e "${YELLOW}🔙 Going back...${NC}"
                sleep 0.3
                return 98  # Back
                ;;
            q|Q)
                echo -e "${RED}👋 Goodbye!${NC}"
                return 99  # Quit
                ;;
            *)
                echo -e "${RED}❌ Invalid input. Please try again.${NC}"
                ;;
        esac
    done
}

# Enhanced text input with fancy prompts
get_text_input() {
    local prompt="$1"
    local default="$2"
    local validator="$3"
    
    while true; do
        echo -e "${CYAN}┌─ Input Required ─────────────────────────────────────┐${NC}"
        echo -e "${CYAN}│${NC}"
        if [ -n "$default" ]; then
            echo -e "${CYAN}│${NC} 📝 $prompt"
            echo -e "${CYAN}│${NC} ${GRAY}Default: ${YELLOW}$default${NC}"
            echo -e "${CYAN}│${NC}"
            echo -ne "${CYAN}└─❯${NC} ${WHITE}"
        else
            echo -e "${CYAN}│${NC} 📝 $prompt"
            echo -e "${CYAN}│${NC}"
            echo -ne "${CYAN}└─❯${NC} ${WHITE}"
        fi
        
        read -r input
        echo -e "${NC}"
        
        # Use default if input is empty
        if [ -z "$input" ] && [ -n "$default" ]; then
            input="$default"
        fi
        
        # Validate input if validator function provided
        if [ -n "$validator" ]; then
            if $validator "$input"; then
                echo -e "${GREEN}✅ Valid input: ${BOLD}$input${NC}"
                sleep 0.5
                echo "$input"
                return 0
            else
                echo -e "${RED}❌ Invalid input. Please try again.${NC}"
                echo ""
            fi
        else
            echo -e "${GREEN}✅ Input accepted: ${BOLD}$input${NC}"
            sleep 0.5
            echo "$input"
            return 0
        fi
    done
}

# Enhanced validators with better error messages
validate_port() {
    local port="$1"
    if [[ "$port" =~ ^[0-9]+$ ]] && [ "$port" -ge 1 ] && [ "$port" -le 65535 ]; then
        return 0
    else
        echo -e "${RED}🚫 Port must be a number between 1 and 65535${NC}"
        return 1
    fi
}

validate_hostname() {
    local hostname="$1"
    if [[ "$hostname" =~ ^[a-zA-Z0-9.-]+$ ]] && [ ${#hostname} -le 253 ]; then
        return 0
    else
        echo -e "${RED}🚫 Invalid hostname format (use letters, numbers, dots, hyphens only)${NC}"
        return 1
    fi
}

# Menu handlers
handle_server_config() {
    menu_stack+=("$current_menu")
    current_menu="server"
    
    while true; do
        show_header
        show_config_status
        show_menu "Server Configuration" \
            "Set hostname/IP" \
            "Set port" \
            "Test connection"
        
        get_choice 3
        case $? in
            1)
                config[server]=$(get_text_input "Enter server hostname or IP" "${config[server]}" "validate_hostname")
                ;;
            2)
                config[port]=$(get_text_input "Enter port number" "${config[port]:-8080}" "validate_port")
                ;;
            3)
                if [ -n "${config[server]}" ] && [ -n "${config[port]}" ]; then
                    echo -e "${CYAN}┌─ Connection Test ────────────────────────────────────┐${NC}"
                    echo -e "${CYAN}│${NC} 🔍 Testing connection to ${YELLOW}${config[server]}:${config[port]}${NC}"
                    echo -e "${CYAN}│${NC}"
                    echo -ne "${CYAN}│${NC} ${YELLOW}⏳ Please wait"
                    for i in {1..5}; do
                        sleep 0.3
                        echo -n "."
                    done
                    echo ""
                    echo -e "${CYAN}│${NC}"
                    
                    # Simulate connection test (replace with real test)
                    if timeout 3 bash -c "</dev/tcp/${config[server]}/${config[port]}" 2>/dev/null; then
                        echo -e "${CYAN}│${NC} ${GREEN}✅ Connection successful!${NC}"
                    else
                        echo -e "${CYAN}│${NC} ${RED}❌ Connection failed (host may be down or port closed)${NC}"
                    fi
                    
                    echo -e "${CYAN}│${NC}"
                    echo -e "${CYAN}└──────────────────────────────────────────────────────┘${NC}"
                    echo -ne "${GRAY}Press ${WHITE}Enter${GRAY} to continue...${NC}"
                    read
                else
                    echo -e "${RED}❌ Please set server and port first${NC}"
                    echo -ne "${GRAY}Press ${WHITE}Enter${GRAY} to continue...${NC}"
                    read
                fi
                ;;
            98)
                current_menu="${menu_stack[-1]}"
                unset menu_stack[-1]
                return
                ;;
            99)
                exit 0
                ;;
        esac
    done
}

handle_environment_config() {
    menu_stack+=("$current_menu")
    current_menu="environment"
    
    show_header
    show_config_status
    show_menu "Select Environment" \
        "Development" \
        "Staging" \
        "Production"
    
    get_choice 3
    case $? in
        1) config[environment]="development" ;;
        2) config[environment]="staging" ;;
        3) config[environment]="production" ;;
        98)
            current_menu="${menu_stack[-1]}"
            unset menu_stack[-1]
            return
            ;;
        99) exit 0 ;;
    esac
    
    current_menu="${menu_stack[-1]}"
    unset menu_stack[-1]
}

handle_database_config() {
    menu_stack+=("$current_menu")
    current_menu="database"
    
    show_header
    show_config_status
    show_menu "Select Database Type" \
        "MySQL" \
        "PostgreSQL" \
        "SQLite" \
        "MongoDB"
    
    get_choice 4
    case $? in
        1) config[database]="mysql" ;;
        2) config[database]="postgresql" ;;
        3) config[database]="sqlite" ;;
        4) config[database]="mongodb" ;;
        98)
            current_menu="${menu_stack[-1]}"
            unset menu_stack[-1]
            return
            ;;
        99) exit 0 ;;
    esac
    
    current_menu="${menu_stack[-1]}"
    unset menu_stack[-1]
}

handle_ssl_config() {
    menu_stack+=("$current_menu")
    current_menu="ssl"
    
    show_header
    show_config_status
    show_menu "SSL Configuration" \
        "Enable SSL" \
        "Disable SSL"
    
    get_choice 2
    case $? in
        1) config[ssl]="enabled" ;;
        2) config[ssl]="disabled" ;;
        98)
            current_menu="${menu_stack[-1]}"
            unset menu_stack[-1]
            return
            ;;
        99) exit 0 ;;
    esac
    
    current_menu="${menu_stack[-1]}"
    unset menu_stack[-1]
}

show_final_config() {
    show_header
    
    # Progress bar animation
    echo -e "${GREEN}${BOLD}🎉 Configuration Complete! 🎉${NC}"
    echo ""
    echo -e "${WHITE}${BOLD}┌─ Final Configuration ────────────────────────────────┐${NC}"
    echo -e "${WHITE}│${NC}"
    
    # Show each config item with appropriate emoji and styling
    echo -e "${WHITE}│${NC} 🖥️  ${CYAN}Server:${NC} ${GREEN}${BOLD}${config[server]}${NC}"
    echo -e "${WHITE}│${NC} 🔌 ${CYAN}Port:${NC} ${GREEN}${BOLD}${config[port]}${NC}"
    
    # Environment with appropriate emoji
    case "${config[environment]}" in
        "development") env_emoji="🛠️" env_color="${YELLOW}" ;;
        "staging") env_emoji="🧪" env_color="${BLUE}" ;;
        "production") env_emoji="🚀" env_color="${RED}" ;;
    esac
    echo -e "${WHITE}│${NC} ${env_emoji} ${CYAN}Environment:${NC} ${env_color}${BOLD}${config[environment]}${NC}"
    
    # Database with appropriate emoji
    case "${config[database]}" in
        "mysql") db_emoji="🐬" ;;
        "postgresql") db_emoji="🐘" ;;
        "sqlite") db_emoji="🪶" ;;
        "mongodb") db_emoji="🍃" ;;
    esac
    echo -e "${WHITE}│${NC} ${db_emoji} ${CYAN}Database:${NC} ${GREEN}${BOLD}${config[database]}${NC}"
    
    # SSL status
    if [ "${config[ssl]}" = "enabled" ]; then
        echo -e "${WHITE}│${NC} 🔒 ${CYAN}SSL:${NC} ${GREEN}${BOLD}✅ Enabled${NC}"
    else
        echo -e "${WHITE}│${NC} 🔓 ${CYAN}SSL:${NC} ${YELLOW}${BOLD}⚠️  Disabled${NC}"
    fi
    
    echo -e "${WHITE}│${NC}"
    echo -e "${WHITE}└───────────────────────────────────────────────────────┘${NC}"
    echo ""
    
    # Generated command in a fancy box
    echo -e "${PURPLE}${BOLD}┌─ Generated Command ───────────────────────────────────┐${NC}"
    echo -e "${PURPLE}│${NC}"
    echo -e "${PURPLE}│${NC} ${GRAY}myapp --server=${YELLOW}${config[server]}${GRAY} --port=${YELLOW}${config[port]}${GRAY} \\${NC}"
    echo -e "${PURPLE}│${NC} ${GRAY}       --env=${YELLOW}${config[environment]}${GRAY} --db=${YELLOW}${config[database]}${GRAY} --ssl=${YELLOW}${config[ssl]}${NC}"
    echo -e "${PURPLE}│${NC}"
    echo -e "${PURPLE}└───────────────────────────────────────────────────────┘${NC}"
    echo ""
    
    # Action menu
    show_menu "What would you like to do?" \
        "⚡ Execute command now" \
        "💾 Save to script file" \
        "📋 Copy to clipboard" \
        "🔄 Back to main menu"
    
    get_choice 4
    case $? in
        1)
            echo -e "${GREEN}${BOLD}⚡ Executing command...${NC}"
            echo ""
            echo -e "${CYAN}┌─ Command Output ─────────────────────────────────────┐${NC}"
            echo -e "${CYAN}│${NC} ${GRAY}myapp --server=${config[server]} --port=${config[port]} --env=${config[environment]} --db=${config[database]} --ssl=${config[ssl]}${NC}"
            echo -e "${CYAN}│${NC}"
            echo -e "${CYAN}│${NC} ${YELLOW}🔄 Starting application...${NC}"
            echo -e "${CYAN}│${NC} ${GREEN}✅ Application started successfully!${NC}"
            echo -e "${CYAN}└──────────────────────────────────────────────────────┘${NC}"
            echo ""
            echo -ne "${GRAY}Press ${WHITE}Enter${GRAY} to continue...${NC}"
            read
            ;;
        2)
            local script_name="config_command.sh"
            echo "#!/bin/bash" > "$script_name"
            echo "myapp --server=${config[server]} --port=${config[port]} --env=${config[environment]} --db=${config[database]} --ssl=${config[ssl]}" >> "$script_name"
            chmod +x "$script_name"
            echo -e "${GREEN}✅ Command saved to ${BOLD}$script_name${NC}"
            echo -ne "${GRAY}Press ${WHITE}Enter${GRAY} to continue...${NC}"
            read
            ;;
        3)
            local cmd_text="myapp --server=${config[server]} --port=${config[port]} --env=${config[environment]} --db=${config[database]} --ssl=${config[ssl]}"
            if command -v xclip >/dev/null 2>&1; then
                echo "$cmd_text" | xclip -selection clipboard
                echo -e "${GREEN}📋 Command copied to clipboard!${NC}"
            elif command -v pbcopy >/dev/null 2>&1; then
                echo "$cmd_text" | pbcopy
                echo -e "${GREEN}📋 Command copied to clipboard!${NC}"
            else
                echo -e "${YELLOW}⚠️  Clipboard tool not found. Install xclip (Linux) or use pbcopy (macOS)${NC}"
                echo -e "${GRAY}Command: ${WHITE}$cmd_text${NC}"
            fi
            echo -ne "${GRAY}Press ${WHITE}Enter${GRAY} to continue...${NC}"
            read
            ;;
        4)
            return
            ;;
        99)
            exit 0
            ;;
    esac
}

# Main menu loop with enhanced visuals
main_menu() {
    while true; do
        show_header
        show_progress_bar
        show_config_status
        
        # Check if all required fields are set
        all_set=true
        for key in server port environment database ssl; do
            if [ -z "${config[$key]}" ]; then
                all_set=false
                break
            fi
        done
        
        local menu_options=(
            "Configure Server Settings"
            "Select Environment"
            "Configure Database"
            "Configure SSL Security"
        )
        
        if [ "$all_set" = true ]; then
            menu_options+=("🎯 Generate & Execute Command")
        else
            menu_options+=("🚫 Complete all settings first")
        fi
        
        show_menu "🏠 Main Configuration Menu" "${menu_options[@]}"
        
        local max_selectable=4
        if [ "$all_set" = true ]; then
            max_selectable=5
        fi
        
        get_choice $max_selectable
        case $? in
            1) handle_server_config ;;
            2) handle_environment_config ;;
            3) handle_database_config ;;
            4) handle_ssl_config ;;
            5) 
                if [ "$all_set" = true ]; then
                    show_final_config
                else
                    echo -e "${RED}❌ Please complete all configuration items first!${NC}"
                    echo -ne "${GRAY}Press ${WHITE}Enter${GRAY} to continue...${NC}"
                    read
                fi
                ;;
            98) 
                echo -e "${YELLOW}ℹ️  Already at main menu${NC}"
                sleep 1
                ;;
            99) 
                echo -e "${PURPLE}${BOLD}"
                echo "    ╔══════════════════════════════════════════════════════╗"
                echo "    ║                                                      ║"
                echo "    ║              👋 Thank you for using                  ║"
                echo "    ║           Configuration Wizard! 🌟                  ║"
                echo "    ║                                                      ║"
                echo "    ║              Have a great day! 🚀                   ║"
                echo "    ║                                                      ║"
                echo "    ╚══════════════════════════════════════════════════════╝"
                echo -e "${NC}"
                sleep 1
                exit 0
                ;;
        esac
    done
}

# Enhanced trap with animated exit
trap 'echo -e "\n${YELLOW}⚠️  Use ${RED}q${YELLOW} to quit properly ${YELLOW}⚠️${NC}"; sleep 1' INT

# Animated loading function
show_loading() {
    local message="$1"
    local duration="${2:-2}"
    
    echo -ne "${CYAN}$message${NC}"
    for i in $(seq 1 $duration); do
        for spinner in '⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏'; do
            echo -ne "\r${CYAN}$message ${YELLOW}$spinner${NC}"
            sleep 0.1
        done
    done
    echo -e "\r${GREEN}$message ✅${NC}"
}

# Welcome animation
show_welcome() {
    clear
    echo -e "${PURPLE}${BOLD}"
    echo "    ╔══════════════════════════════════════════════════════╗"
    sleep 0.2
    echo "    ║                                                      ║"
    sleep 0.2
    echo "    ║        🌟 Welcome to Configuration Wizard 🌟         ║"
    sleep 0.2
    echo "    ║                                                      ║"
    sleep 0.2
    echo "    ║  This tool will guide you through setting up your    ║"
    sleep 0.2
    echo "    ║  application with an interactive menu system.        ║"
    sleep 0.2
    echo "    ║                                                      ║"
    sleep 0.2
    echo "    ║              Press Enter to begin...                 ║"
    sleep 0.2
    echo "    ║                                                      ║"
    sleep 0.2
    echo "    ╚══════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    read -r
    show_loading "🚀 Initializing wizard" 1
}

# Start the application with welcome screen
show_welcome
main_menu
